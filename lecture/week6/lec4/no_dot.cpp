#include <iostream>
#include <vector>

using namespace std;

// An item with a price and an ID
class Item {
    double price;
    int id;
    
    public:
    // Default constructor
    Item() {
        id = 0;
        price = 0;
    }
    
    Item(int i, double p) {
        id = i;
        price = p;
    }
    
    double get_price() {
        return price;
    }
    
    int get_id() {
        return id;
    }
    
    void set_price(double p) {
        price = p;
    }
    
    void set_id(int num) {
        id = num;
    }
};

// A Receipt is a collection of items - represented by a vector
class Receipt{
    vector<Item> item_list;
    
    public:
    vector<Item> get_list() {
        return item_list;
    }
    
    int get_item_size(){
        return item_list.size(); // just return the current list size 
    }
    
    double get_total() {
        double sum = 0;
        
        // Add up the prices of each item in the list
        for(int i = 0; i < item_list.size(); i++) {
            sum = sum + item_list[i].get_price();
        }
        
        return sum;
    }
    
    // Add item to receipt
    void add_item(Item i){
        item_list.push_back(i);
    }
    
    // Another way to add item to receipt
    // Notice both this and above function have same name but different 
    // params (function overloading)
    void add_item(int id, double price){
        
        // First create an Item to add from the given params
        Item i = Item(id, price);
            
        // Now add it to the list
        item_list.push_back(i);
    }
    
    // Add a vector of items
    void add_items(vector<Item> v) {
        for(int i = 0; i < v.size(); i++) {
            add_item(v[i]);
        }
        // Note there is no need to use the dot notation to use the 
        // member function 'add_item' here. 
        
        // Why?
        // Because we are inside the definition of the same class
        // That is, the implicit parameter is obviously an object of the 
        // class itself
        
        // Anytime you want to use a member function of the same class
        // inside the class definition itself, you don't need the 
        // dot notation
    }
    
    double get_average();
};


// Another example of not needing the dot notation
double Receipt::get_average() {
    double sum = get_total();
    int num_items = get_item_size();
    
    return (sum/num_items);
}

// Again even though superficically, we are not inside the class 
// definition, the function 'get_average' is part of the class Receipt.

// So we don't need to use dot notation for member functions because
// it is obvious which object we are referring to





int main() {
    Item i1 = Item(1, 2.34);
    Item i2 = Item(1, 2.75);
    Item i3 = Item(1, 5.46);
    
    Receipt r; // recall we didn't define a constructor for this class
                // We are using a default constructor generated by
                // the compiler (list is empty)
    
    r.add_item(i1);  // Adding items one at a time
    
    // Adding multiple items at the same time
    vector<Item> v = {i2, i3};
    
    r.add_items(v);
    
    cout << r.get_total() << endl;
    
    cout << r.get_average() << endl;
}